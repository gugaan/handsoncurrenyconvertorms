package com.ibm.managecurrency.service;

import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.ibm.managecurrency.dto.CurrencyDTO;
import com.ibm.managecurrency.entity.Currency;
import com.ibm.managecurrency.mapper.CurrencyMapper;
import com.ibm.managecurrency.repository.ManageCurrencyRepository;
import com.netflix.hystrix.contrib.javanica.annotation.HystrixCommand;

@Service
public class ManageCurrencyService {

	@Autowired
	ManageCurrencyRepository manageCurrencyRepository;

	@HystrixCommand(fallbackMethod = "currencyServiceFallback")
	public Double getCovertionFactor(String countrycode) {

		Optional<Currency> currency = manageCurrencyRepository.findByCountryCode(countrycode);
		Double convertionFactor = currency.get().getConvertionfactor();
		return convertionFactor;

	}

	public Double currencyServiceFallback(String countrycode) {

		Optional<Currency> currency = manageCurrencyRepository.findByCountryCode(countrycode);
		Double convertionFactor = null;
		if (!currency.isPresent()) {
			convertionFactor = 25.0;

		}
		return convertionFactor;
	}
	
	public void createConversionFactor(CurrencyDTO dto) {
		CurrencyMapper currencymapper= new CurrencyMapper();
		Currency currency=currencymapper.convertToEntity(dto);
		manageCurrencyRepository.save(currency);
	}
	public void updateConversionFactor(CurrencyDTO dto) {
		CurrencyMapper currencymapper= new CurrencyMapper();
		Currency currency=currencymapper.convertToEntity(dto);
		manageCurrencyRepository.save(currency);
	}
}
